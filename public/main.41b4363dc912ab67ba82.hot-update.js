/*! For license information please see main.41b4363dc912ab67ba82.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Home.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/lodash/map.js"),i=s.n(r);Object(function(){var t=new Error("Cannot find module 'About/Media'");throw t.code="MODULE_NOT_FOUND",t}());var n=s("./node_modules/ogl/src/extras/Plane.js");class a{constructor({gl:t}){this.gl=t,this.medias=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGallery(){i()(this.medias,((t,e)=>new Object(function(){var t=new Error("Cannot find module 'About/Media'");throw t.code="MODULE_NOT_FOUND",t}())({element:t,geometry:this.geometry,index:e})))}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>o});var r=s("./node_modules/ogl/src/math/Vec3.js");const i=new r.Vec3;let n=1,a=1,d=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let i=1;35674===s&&(i=2),35675===s&&(i=3),35676===s&&(i=4);const n=r.size/i,a=1===i?0:i*i*i,d=1===i?0:i*i;for(let e=0;e<i;e++)this.gl.vertexAttribPointer(t+e,n,r.type,r.normalized,r.stride+a,r.offset+e*d),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:d?void 0:(console.warn("No position buffer data found to compute bounds"),d=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const i=this.bounds.min,n=this.bounds.max,a=this.bounds.center,d=this.bounds.scale;i.set(1/0),n.set(-1/0);for(let t=0,r=e.length;t<r;t+=s){const s=e[t],r=e[t+1],a=e[t+2];i.x=Math.min(s,i.x),i.y=Math.min(r,i.y),i.z=Math.min(a,i.z),n.x=Math.max(s,n.x),n.y=Math.max(r,n.y),n.z=Math.max(a,n.z)}d.sub(n,i),a.add(i,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,n=e.length;t<n;t+=s)i.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(i));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>i});var r=s("./node_modules/ogl/src/core/Geometry.js");class i extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:n=1,attributes:a={}}={}){const d=r,o=n,u=(d+1)*(o+1),h=d*o*6,l=new Float32Array(3*u),c=new Float32Array(3*u),g=new Float32Array(2*u),b=h>65536?new Uint32Array(h):new Uint16Array(h);i.buildPlane(l,c,g,b,e,s,0,d,o),Object.assign(a,{position:{size:3,data:l},normal:{size:3,data:c},uv:{size:2,data:g},index:{data:b}}),super(t,a)}static buildPlane(t,e,s,r,i,n,a,d,o,u=0,h=1,l=2,c=1,g=-1,b=0,f=0){const m=b,A=i/d,y=n/o;for(let w=0;w<=o;w++){let x=w*y-n/2;for(let n=0;n<=d;n++,b++){let y=n*A-i/2;if(t[3*b+u]=y*c,t[3*b+h]=x*g,t[3*b+l]=a/2,e[3*b+u]=0,e[3*b+h]=0,e[3*b+l]=a>=0?1:-1,s[2*b]=n/d,s[2*b+1]=1-w/o,w===o||n===d)continue;let p=m+n+w*(d+1),E=m+n+(w+1)*(d+1),_=m+n+(w+1)*(d+1)+1,R=m+n+w*(d+1)+1;r[6*f]=p,r[6*f+1]=E,r[6*f+2]=R,r[6*f+3]=E,r[6*f+4]=_,r[6*f+5]=R,f++}}}}}},(function(t){t.h=()=>"525f5b3487e27cd7a769"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,