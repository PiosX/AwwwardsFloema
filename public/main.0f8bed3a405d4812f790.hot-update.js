/*! For license information please see main.0f8bed3a405d4812f790.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Home.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/lodash/map.js"),i=s.n(r);Object(function(){var t=new Error("Cannot find module 'About/Media'");throw t.code="MODULE_NOT_FOUND",t}());var n=s("./node_modules/ogl/src/extras/Plane.js");class a{constructor(){this.medias=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery()}createGeometry(){this.geometry=new n.Plane}createGallery(){i()(this.medias,((t,e)=>new Object(function(){var t=new Error("Cannot find module 'About/Media'");throw t.code="MODULE_NOT_FOUND",t}())({element:t,index:e})))}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>o});var r=s("./node_modules/ogl/src/math/Vec3.js");const i=new r.Vec3;let n=1,a=1,d=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let i=1;35674===s&&(i=2),35675===s&&(i=3),35676===s&&(i=4);const n=r.size/i,a=1===i?0:i*i*i,d=1===i?0:i*i;for(let e=0;e<i;e++)this.gl.vertexAttribPointer(t+e,n,r.type,r.normalized,r.stride+a,r.offset+e*d),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:d?void 0:(console.warn("No position buffer data found to compute bounds"),d=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const i=this.bounds.min,n=this.bounds.max,a=this.bounds.center,d=this.bounds.scale;i.set(1/0),n.set(-1/0);for(let t=0,r=e.length;t<r;t+=s){const s=e[t],r=e[t+1],a=e[t+2];i.x=Math.min(s,i.x),i.y=Math.min(r,i.y),i.z=Math.min(a,i.z),n.x=Math.max(s,n.x),n.y=Math.max(r,n.y),n.z=Math.max(a,n.z)}d.sub(n,i),a.add(i,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,n=e.length;t<n;t+=s)i.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(i));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>i});var r=s("./node_modules/ogl/src/core/Geometry.js");class i extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:n=1,attributes:a={}}={}){const d=r,o=n,u=(d+1)*(o+1),h=d*o*6,l=new Float32Array(3*u),c=new Float32Array(3*u),b=new Float32Array(2*u),g=h>65536?new Uint32Array(h):new Uint16Array(h);i.buildPlane(l,c,b,g,e,s,0,d,o),Object.assign(a,{position:{size:3,data:l},normal:{size:3,data:c},uv:{size:2,data:b},index:{data:g}}),super(t,a)}static buildPlane(t,e,s,r,i,n,a,d,o,u=0,h=1,l=2,c=1,b=-1,g=0,f=0){const m=g,A=i/d,y=n/o;for(let w=0;w<=o;w++){let x=w*y-n/2;for(let n=0;n<=d;n++,g++){let y=n*A-i/2;if(t[3*g+u]=y*c,t[3*g+h]=x*b,t[3*g+l]=a/2,e[3*g+u]=0,e[3*g+h]=0,e[3*g+l]=a>=0?1:-1,s[2*g]=n/d,s[2*g+1]=1-w/o,w===o||n===d)continue;let p=m+n+w*(d+1),E=m+n+(w+1)*(d+1),_=m+n+(w+1)*(d+1)+1,R=m+n+w*(d+1)+1;r[6*f]=p,r[6*f+1]=E,r[6*f+2]=R,r[6*f+3]=E,r[6*f+4]=_,r[6*f+5]=R,f++}}}}}},(function(t){t.h=()=>"eb999e08cfa8f8ff67e8"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFJTixFQUFLSSxHQUFNRCxFQUFLLElBQU1yQixFQUFRLEdBQ2xDeUIsRUFBSVAsRUFBS0ksR0FBTUQsRUFBSyxJQUFNckIsRUFBUSxHQUFLLEVBQ3ZDMEIsRUFBSVIsRUFBS0ksRUFBS0QsR0FBTXJCLEVBQVEsR0FBSyxFQUVyQ3BILEVBQVcsRUFBTHFJLEdBQVVNLEVBQ2hCM0ksRUFBVyxFQUFMcUksRUFBUyxHQUFLTyxFQUNwQjVJLEVBQVcsRUFBTHFJLEVBQVMsR0FBS1MsRUFDcEI5SSxFQUFXLEVBQUxxSSxFQUFTLEdBQUtPLEVBQ3BCNUksRUFBVyxFQUFMcUksRUFBUyxHQUFLUSxFQUNwQjdJLEVBQVcsRUFBTHFJLEVBQVMsR0FBS1MsRUFDcEJULHVCQzlEaEJVLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL0dlb21ldHJ5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9QbGFuZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcclxuaW1wb3J0IE1lZGlhIGZyb20gXCJBYm91dC9NZWRpYVwiO1xyXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCJvZ2xcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5tZWRpYXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmhvbWVfX2dhbGxlcnlfX21lZGlhX19pbWFnZVwiKTtcclxuXHRcdHRoaXMuY3JlYXRlR2VvbWV0cnkoKTtcclxuXHRcdHRoaXMuY3JlYXRlR2FsbGVyeSgpO1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlR2VvbWV0cnkoKSB7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKCk7XHJcblx0fVxyXG5cclxuXHRjcmVhdGVHYWxsZXJ5KCkge1xyXG5cdFx0bWFwKHRoaXMubWVkaWFzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuXHRcdFx0cmV0dXJuIG5ldyBNZWRpYSh7XHJcblx0XHRcdFx0ZWxlbWVudCxcclxuXHRcdFx0XHRpbmRleCxcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwiLy8gYXR0cmlidXRlIHBhcmFtc1xuLy8ge1xuLy8gICAgIGRhdGEgLSB0eXBlZCBhcnJheSBlZyBVSW50MTZBcnJheSBmb3IgaW5kaWNlcywgRmxvYXQzMkFycmF5XG4vLyAgICAgc2l6ZSAtIGludCBkZWZhdWx0IDFcbi8vICAgICBpbnN0YW5jZWQgLSBkZWZhdWx0IG51bGwuIFBhc3MgZGl2aXNvciBhbW91bnRcbi8vICAgICB0eXBlIC0gZ2wgZW51bSBkZWZhdWx0IGdsLlVOU0lHTkVEX1NIT1JUIGZvciAnaW5kZXgnLCBnbC5GTE9BVCBmb3Igb3RoZXJzXG4vLyAgICAgbm9ybWFsaXplZCAtIGJvb2xlYW4gZGVmYXVsdCBmYWxzZVxuXG4vLyAgICAgYnVmZmVyIC0gZ2wgYnVmZmVyLCBpZiBidWZmZXIgZXhpc3RzLCBkb24ndCBuZWVkIHRvIHByb3ZpZGUgZGF0YSAtIGFsdGhvdWdoIG5lZWRzIHBvc2l0aW9uIGRhdGEgZm9yIGJvdW5kcyBjYWxjdWxhdGlvblxuLy8gICAgIHN0cmlkZSAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgb2Zmc2V0IC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBjb3VudCAtIGRlZmF1bHQgbnVsbCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWluIC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1heCAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vIH1cblxuLy8gVE9ETzogZml0IGluIHRyYW5zZm9ybSBmZWVkYmFja1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSBuZXcgVmVjMygpO1xuXG5sZXQgSUQgPSAxO1xubGV0IEFUVFJfSUQgPSAxO1xuXG4vLyBUbyBzdG9wIGluaWZpbml0ZSB3YXJuaW5nc1xubGV0IGlzQm91bmRzV2FybmVkID0gZmFsc2U7XG5cbmV4cG9ydCBjbGFzcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBHZW9tZXRyeScpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIFN0b3JlIG9uZSBWQU8gcGVyIHByb2dyYW0gYXR0cmlidXRlIGxvY2F0aW9ucyBvcmRlclxuICAgICAgICB0aGlzLlZBT3MgPSB7fTtcblxuICAgICAgICB0aGlzLmRyYXdSYW5nZSA9IHsgc3RhcnQ6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIFVuYmluZCBjdXJyZW50IFZBTyBzbyB0aGF0IG5ldyBidWZmZXJzIGRvbid0IGdldCBhZGRlZCB0byBhY3RpdmUgbWVzaFxuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBudWxsO1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgYnVmZmVyc1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQXR0cmlidXRlKGtleSwgYXR0cikge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHI7XG5cbiAgICAgICAgLy8gU2V0IG9wdGlvbnNcbiAgICAgICAgYXR0ci5pZCA9IEFUVFJfSUQrKzsgLy8gVE9ETzogY3VycmVudGx5IHVudXNlZCwgcmVtb3ZlP1xuICAgICAgICBhdHRyLnNpemUgPSBhdHRyLnNpemUgfHwgMTtcbiAgICAgICAgYXR0ci50eXBlID1cbiAgICAgICAgICAgIGF0dHIudHlwZSB8fFxuICAgICAgICAgICAgKGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLkZMT0FUXG4gICAgICAgICAgICAgICAgOiBhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLlVOU0lHTkVEX1NIT1JUXG4gICAgICAgICAgICAgICAgOiB0aGlzLmdsLlVOU0lHTkVEX0lOVCk7IC8vIFVpbnQzMkFycmF5XG4gICAgICAgIGF0dHIudGFyZ2V0ID0ga2V5ID09PSAnaW5kZXgnID8gdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiA6IHRoaXMuZ2wuQVJSQVlfQlVGRkVSO1xuICAgICAgICBhdHRyLm5vcm1hbGl6ZWQgPSBhdHRyLm5vcm1hbGl6ZWQgfHwgZmFsc2U7XG4gICAgICAgIGF0dHIuc3RyaWRlID0gYXR0ci5zdHJpZGUgfHwgMDtcbiAgICAgICAgYXR0ci5vZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwO1xuICAgICAgICBhdHRyLmNvdW50ID0gYXR0ci5jb3VudCB8fCAoYXR0ci5zdHJpZGUgPyBhdHRyLmRhdGEuYnl0ZUxlbmd0aCAvIGF0dHIuc3RyaWRlIDogYXR0ci5kYXRhLmxlbmd0aCAvIGF0dHIuc2l6ZSk7XG4gICAgICAgIGF0dHIuZGl2aXNvciA9IGF0dHIuaW5zdGFuY2VkIHx8IDA7XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgYXR0ci51c2FnZSA9IGF0dHIudXNhZ2UgfHwgdGhpcy5nbC5TVEFUSUNfRFJBVztcblxuICAgICAgICBpZiAoIWF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICAvLyBQdXNoIGRhdGEgdG8gYnVmZmVyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBnZW9tZXRyeSBjb3VudHMuIElmIGluZGV4ZWQsIGlnbm9yZSByZWd1bGFyIGF0dHJpYnV0ZXNcbiAgICAgICAgaWYgKGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgdGhpcy5pc0luc3RhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZWRDb3VudCAmJiB0aGlzLmluc3RhbmNlZENvdW50ICE9PSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnZW9tZXRyeSBoYXMgbXVsdGlwbGUgaW5zdGFuY2VkIGJ1ZmZlcnMgb2YgZGlmZmVyZW50IGxlbmd0aCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5pbnN0YW5jZWRDb3VudCA9IE1hdGgubWluKHRoaXMuaW5zdGFuY2VkQ291bnQsIGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2luZGV4Jykge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBhdHRyLmNvdW50O1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gTWF0aC5tYXgodGhpcy5kcmF3UmFuZ2UuY291bnQsIGF0dHIuY291bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQXR0cmlidXRlKGF0dHIpIHtcbiAgICAgICAgY29uc3QgaXNOZXdCdWZmZXIgPSAhYXR0ci5idWZmZXI7XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikgYXR0ci5idWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyICE9PSBhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShhdHRyLnRhcmdldCwgYXR0ci5kYXRhLCBhdHRyLnVzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyU3ViRGF0YShhdHRyLnRhcmdldCwgMCwgYXR0ci5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0SW5kZXgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoJ2luZGV4JywgdmFsdWUpO1xuICAgIH1cblxuICAgIHNldERyYXdSYW5nZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcbiAgICB9XG5cbiAgICBzZXRJbnN0YW5jZWRDb3VudCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY3JlYXRlVkFPKHByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdID0gdGhpcy5nbC5yZW5kZXJlci5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICB0aGlzLmJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pO1xuICAgIH1cblxuICAgIGJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pIHtcbiAgICAgICAgLy8gTGluayBhbGwgYXR0cmlidXRlcyB0byBwcm9ncmFtIHVzaW5nIGdsLnZlcnRleEF0dHJpYlBvaW50ZXJcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSwgdHlwZSB9KSA9PiB7XG4gICAgICAgICAgICAvLyBJZiBnZW9tZXRyeSBtaXNzaW5nIGEgcmVxdWlyZWQgc2hhZGVyIGF0dHJpYnV0ZVxuICAgICAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGFjdGl2ZSBhdHRyaWJ1dGUgJHtuYW1lfSBub3QgYmVpbmcgc3VwcGxpZWRgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG5cbiAgICAgICAgICAgIC8vIEZvciBtYXRyaXggYXR0cmlidXRlcywgYnVmZmVyIG5lZWRzIHRvIGJlIGRlZmluZWQgcGVyIGNvbHVtblxuICAgICAgICAgICAgbGV0IG51bUxvYyA9IDE7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzQpIG51bUxvYyA9IDI7IC8vIG1hdDJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NSkgbnVtTG9jID0gMzsgLy8gbWF0M1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc2KSBudW1Mb2MgPSA0OyAvLyBtYXQ0XG5cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBhdHRyLnNpemUgLyBudW1Mb2M7XG4gICAgICAgICAgICBjb25zdCBzdHJpZGUgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogbnVtTG9jICogbnVtTG9jO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIG51bUxvYztcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Mb2M7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiArIGksIHNpemUsIGF0dHIudHlwZSwgYXR0ci5ub3JtYWxpemVkLCBhdHRyLnN0cmlkZSArIHN0cmlkZSwgYXR0ci5vZmZzZXQgKyBpICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uICsgaSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2VkIGF0dHJpYnV0ZXMsIGRpdmlzb3IgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAgICAgICAgICAgIC8vIEZvciBmaXJlZm94LCBuZWVkIHRvIHNldCBiYWNrIHRvIDAgaWYgbm9uLWluc3RhbmNlZCBkcmF3biBhZnRlciBpbnN0YW5jZWQuIEVsc2Ugd29uJ3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uICsgaSwgYXR0ci5kaXZpc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBpbmRpY2VzIGlmIGdlb21ldHJ5IGluZGV4ZWRcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpO1xuICAgIH1cblxuICAgIGRyYXcoeyBwcm9ncmFtLCBtb2RlID0gdGhpcy5nbC5UUklBTkdMRVMgfSkge1xuICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgIT09IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSkgdGhpcy5jcmVhdGVWQU8ocHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBhdHRyaWJ1dGVzIG5lZWQgdXBkYXRpbmdcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIubmVlZHNVcGRhdGUpIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pc0luc3RhbmNlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIDIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdBcnJheXNJbnN0YW5jZWQobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmluc3RhbmNlZENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5jb3VudCwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIDIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFBvc2l0aW9uKCkge1xuICAgICAgICAvLyBVc2UgcG9zaXRpb24gYnVmZmVyLCBvciBtaW4vbWF4IGlmIGF2YWlsYWJsZVxuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuICAgICAgICAvLyBpZiAoYXR0ci5taW4pIHJldHVybiBbLi4uYXR0ci5taW4sIC4uLmF0dHIubWF4XTtcbiAgICAgICAgaWYgKGF0dHIuZGF0YSkgcmV0dXJuIGF0dHI7XG4gICAgICAgIGlmIChpc0JvdW5kc1dhcm5lZCkgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIHBvc2l0aW9uIGJ1ZmZlciBkYXRhIGZvdW5kIHRvIGNvbXB1dGUgYm91bmRzJyk7XG4gICAgICAgIHJldHVybiAoaXNCb3VuZHNXYXJuZWQgPSB0cnVlKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdCb3goYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSA/IGF0dHIuc3RyaWRlIC8gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHMgPSB7XG4gICAgICAgICAgICAgICAgbWluOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIG1heDogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBJbmZpbml0eSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLmJvdW5kcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMuYm91bmRzLm1heDtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5ib3VuZHMuY2VudGVyO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuYm91bmRzLnNjYWxlO1xuXG4gICAgICAgIG1pbi5zZXQoK0luZmluaXR5KTtcbiAgICAgICAgbWF4LnNldCgtSW5maW5pdHkpO1xuXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIHNpemUgb2YgcG9zaXRpb24gKGVnIHRyaWFuZ2xlIHdpdGggVmVjMilcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgY29uc3QgeSA9IGFycmF5W2kgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHogPSBhcnJheVtpICsgMl07XG5cbiAgICAgICAgICAgIG1pbi54ID0gTWF0aC5taW4oeCwgbWluLngpO1xuICAgICAgICAgICAgbWluLnkgPSBNYXRoLm1pbih5LCBtaW4ueSk7XG4gICAgICAgICAgICBtaW4ueiA9IE1hdGgubWluKHosIG1pbi56KTtcblxuICAgICAgICAgICAgbWF4LnggPSBNYXRoLm1heCh4LCBtYXgueCk7XG4gICAgICAgICAgICBtYXgueSA9IE1hdGgubWF4KHksIG1heC55KTtcbiAgICAgICAgICAgIG1heC56ID0gTWF0aC5tYXgoeiwgbWF4LnopO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUuc3ViKG1heCwgbWluKTtcbiAgICAgICAgY2VudGVyLmFkZChtaW4sIG1heCkuZGl2aWRlKDIpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ1NwaGVyZShhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB0aGlzLmNvbXB1dGVCb3VuZGluZ0JveChhdHRyKTtcblxuICAgICAgICBsZXQgbWF4UmFkaXVzU3EgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICB0ZW1wVmVjMy5mcm9tQXJyYXkoYXJyYXksIGkpO1xuICAgICAgICAgICAgbWF4UmFkaXVzU3EgPSBNYXRoLm1heChtYXhSYWRpdXNTcSwgdGhpcy5ib3VuZHMuY2VudGVyLnNxdWFyZWREaXN0YW5jZSh0ZW1wVmVjMykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3VuZHMucmFkaXVzID0gTWF0aC5zcXJ0KG1heFJhZGl1c1NxKTtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLlZBT3MpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZGVsZXRlVmVydGV4QXJyYXkodGhpcy5WQU9zW2tleV0pO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuVkFPc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYXR0cmlidXRlc1trZXldLmJ1ZmZlcik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvR2VvbWV0cnkuanMnO1xuXG5leHBvcnQgY2xhc3MgUGxhbmUgZXh0ZW5kcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxLCBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHdTZWdzID0gd2lkdGhTZWdtZW50cztcbiAgICAgICAgY29uc3QgaFNlZ3MgPSBoZWlnaHRTZWdtZW50cztcblxuICAgICAgICAvLyBEZXRlcm1pbmUgbGVuZ3RoIG9mIGFycmF5c1xuICAgICAgICBjb25zdCBudW0gPSAod1NlZ3MgKyAxKSAqIChoU2VncyArIDEpO1xuICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gd1NlZ3MgKiBoU2VncyAqIDY7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgZW1wdHkgYXJyYXlzIG9uY2VcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCBub3JtYWwgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMik7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbnVtSW5kaWNlcyA+IDY1NTM2ID8gbmV3IFVpbnQzMkFycmF5KG51bUluZGljZXMpIDogbmV3IFVpbnQxNkFycmF5KG51bUluZGljZXMpO1xuXG4gICAgICAgIFBsYW5lLmJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCAwLCB3U2VncywgaFNlZ3MpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgc2l6ZTogMywgZGF0YTogcG9zaXRpb24gfSxcbiAgICAgICAgICAgIG5vcm1hbDogeyBzaXplOiAzLCBkYXRhOiBub3JtYWwgfSxcbiAgICAgICAgICAgIHV2OiB7IHNpemU6IDIsIGRhdGE6IHV2IH0sXG4gICAgICAgICAgICBpbmRleDogeyBkYXRhOiBpbmRleCB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlcihnbCwgYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd1NlZ3MsIGhTZWdzLCB1ID0gMCwgdiA9IDEsIHcgPSAyLCB1RGlyID0gMSwgdkRpciA9IC0xLCBpID0gMCwgaWkgPSAwKSB7XG4gICAgICAgIGNvbnN0IGlvID0gaTtcbiAgICAgICAgY29uc3Qgc2VnVyA9IHdpZHRoIC8gd1NlZ3M7XG4gICAgICAgIGNvbnN0IHNlZ0ggPSBoZWlnaHQgLyBoU2VncztcblxuICAgICAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDw9IGhTZWdzOyBpeSsrKSB7XG4gICAgICAgICAgICBsZXQgeSA9IGl5ICogc2VnSCAtIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBmb3IgKGxldCBpeCA9IDA7IGl4IDw9IHdTZWdzOyBpeCsrLCBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGl4ICogc2VnVyAtIHdpZHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgdV0gPSB4ICogdURpcjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHZdID0geSAqIHZEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB3XSA9IGRlcHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHVdID0gMDtcbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB2XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgd10gPSBkZXB0aCA+PSAwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgdXZbaSAqIDJdID0gaXggLyB3U2VncztcbiAgICAgICAgICAgICAgICB1dltpICogMiArIDFdID0gMSAtIGl5IC8gaFNlZ3M7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXkgPT09IGhTZWdzIHx8IGl4ID09PSB3U2VncykgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBpbyArIGl4ICsgaXkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpO1xuICAgICAgICAgICAgICAgIGxldCBjID0gaW8gKyBpeCArIChpeSArIDEpICogKHdTZWdzICsgMSkgKyAxO1xuICAgICAgICAgICAgICAgIGxldCBkID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSkgKyAxO1xuXG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2XSA9IGE7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgMV0gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDJdID0gZDtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAzXSA9IGI7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgNF0gPSBjO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDVdID0gZDtcbiAgICAgICAgICAgICAgICBpaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZWI5OTllMDhjZmE4ZjhmZjY3ZThcIikiXSwibmFtZXMiOlsiSG9tZSIsImNvbnN0cnVjdG9yIiwidGhpcyIsIm1lZGlhcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyeSIsImdlb21ldHJ5IiwiUGxhbmUiLCJtYXAiLCJlbGVtZW50IiwiaW5kZXgiLCJNZWRpYSIsInRlbXBWZWMzIiwiVmVjMyIsIklEIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJnbCIsImF0dHJpYnV0ZXMiLCJjYW52YXMiLCJjb25zb2xlIiwiZXJyb3IiLCJpZCIsIlZBT3MiLCJkcmF3UmFuZ2UiLCJzdGFydCIsImNvdW50IiwiaW5zdGFuY2VkQ291bnQiLCJyZW5kZXJlciIsImJpbmRWZXJ0ZXhBcnJheSIsImN1cnJlbnRHZW9tZXRyeSIsImdsU3RhdGUiLCJzdGF0ZSIsImtleSIsImFkZEF0dHJpYnV0ZSIsImF0dHIiLCJzaXplIiwidHlwZSIsImRhdGEiLCJGbG9hdDMyQXJyYXkiLCJGTE9BVCIsIlVpbnQxNkFycmF5IiwiVU5TSUdORURfU0hPUlQiLCJVTlNJR05FRF9JTlQiLCJ0YXJnZXQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIkFSUkFZX0JVRkZFUiIsIm5vcm1hbGl6ZWQiLCJzdHJpZGUiLCJvZmZzZXQiLCJieXRlTGVuZ3RoIiwibGVuZ3RoIiwiZGl2aXNvciIsImluc3RhbmNlZCIsIm5lZWRzVXBkYXRlIiwidXNhZ2UiLCJTVEFUSUNfRFJBVyIsImJ1ZmZlciIsInVwZGF0ZUF0dHJpYnV0ZSIsImlzSW5zdGFuY2VkIiwid2FybiIsIk1hdGgiLCJtaW4iLCJtYXgiLCJpc05ld0J1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJvdW5kQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJidWZmZXJTdWJEYXRhIiwic2V0SW5kZXgiLCJ2YWx1ZSIsInNldERyYXdSYW5nZSIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwicHJvZ3JhbSIsImF0dHJpYnV0ZU9yZGVyIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJiaW5kQXR0cmlidXRlcyIsImF0dHJpYnV0ZUxvY2F0aW9ucyIsImZvckVhY2giLCJsb2NhdGlvbiIsIm5hbWUiLCJudW1Mb2MiLCJpIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliRGl2aXNvciIsImRyYXciLCJtb2RlIiwiVFJJQU5HTEVTIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImRyYXdFbGVtZW50cyIsImRyYXdBcnJheXMiLCJnZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiYXJyYXkiLCJCWVRFU19QRVJfRUxFTUVOVCIsImJvdW5kcyIsImNlbnRlciIsInNjYWxlIiwicmFkaXVzIiwiSW5maW5pdHkiLCJzZXQiLCJsIiwieCIsInkiLCJ6Iiwic3ViIiwiYWRkIiwiZGl2aWRlIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwibWF4UmFkaXVzU3EiLCJmcm9tQXJyYXkiLCJzcXVhcmVkRGlzdGFuY2UiLCJzcXJ0IiwicmVtb3ZlIiwiZGVsZXRlVmVydGV4QXJyYXkiLCJkZWxldGVCdWZmZXIiLCJ3aWR0aCIsImhlaWdodCIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsIndTZWdzIiwiaFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwibm9ybWFsIiwidXYiLCJVaW50MzJBcnJheSIsImJ1aWxkUGxhbmUiLCJPYmplY3QiLCJhc3NpZ24iLCJzdXBlciIsImRlcHRoIiwidSIsInYiLCJ3IiwidURpciIsInZEaXIiLCJpaSIsImlvIiwic2VnVyIsInNlZ0giLCJpeSIsIml4IiwiYSIsImIiLCJjIiwiZCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==